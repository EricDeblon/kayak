#!/bin/bash
#
# {{{ CDDL HEADER
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source. A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2018 OmniOS Community Edition (OmniOSce) Association.
#

fail() {
    echo $*
    exit 1
}

note() {
    echo "***"
    echo "*** $*"
    echo "***"
}

# NOTE --> The URL needs to be updated with every release.
# Change "bloody" to whatever release the current branch is.
PUBLISHER=omnios
OMNIOS_URL=https://pkg.omniosce.org/bloody/core
: ${PKGURL:=$OMNIOS_URL}
ZROOT=rpool
OUT=
CLEANUP=0
set -- `getopt cd:o:p: $*`
for i in $*
do
    case $i in
        -c) CLEANUP=1; shift ;;
        -d) ZROOT=$2; shift 2;;
        -o) OUT=$2; shift 2;;
        -p) PROFILE=$2; shift 2;;
        -P) PUBLISHER_OVERRIDE=1; shift ;;
        --) shift; break ;;
    esac
done

name=$1
if [ -z "$name" ]; then
    echo "$0 [-cP] [-d zfsparent] [-p profile] [-o outputfile] <release_name>"
    exit
fi

MPR=`zfs get -H mountpoint $ZROOT | awk '{print $3}'`
[ -z "$OUT" ] && OUT=$MPR/kayak_$name.zfs.xz

if zfs list $ZROOT/$name@entire > /dev/null 2>&1; then
    note "Rolling back to last @entire"
    zfs rollback -r $ZROOT/$name@entire
    MP=`zfs get -H mountpoint $ZROOT/$name | awk '{print $3}'`
else
    zfs create $ZROOT/$name || fail "zfs create"
    MP=`zfs get -H mountpoint $ZROOT/$name | awk '{print $3}'`
    note "Creating IPS image"
    pkg image-create -F -p $PUBLISHER=$PKGURL $MP || fail "image-create"
    entire_version=${name//[a-z]/}
    entire_fmri="entire@11-$entire_version"
    note "Installing $entire_fmri"
    pkg -R $MP install $entire_fmri || fail "install entire"
    # Install the optional packages from entire too
    note "Installing optional packages"
    pkg -R $MP install \
        `pkg -R $MP contents -H -a type=optional -o fmri $entire_fmri` \
        || fail "install optional entire"
    zfs snapshot $ZROOT/$name@entire
fi

if [ -n "$PROFILE" ]; then
    note "Applying custom profile: $PROFILE"
    [ -r "$PROFILE" ] || fail "Cannot find file: $PROFILE"
    while read line; do
        TMPPUB=`echo $line | cut -f1 -d=`
        TMPURL=`echo $line | cut -f2 -d=`
        if [ -n "$TMPURL" -a "$TMPURL" != "$TMPPUB" ]; then
            note "Setting publisher: $TMPPUB / $TMPURL"
            pkg -R $MP set-publisher -g $TMPURL $TMPPUB \
                || fail "set publisher $TMPPUB"
            PUBLISHER=$TMPPUB
            PKGURL=$TMPURL
        else
            note "Installing additional package: $line"
            pkg -R $MP install -g $PKGURL $line || fail "install $line"
        fi
    done < <(grep . $PROFILE | grep -v '^ *#')
fi

if [ -n "$PUBLISHER_OVERRIDE" ]; then
    OMNIOS_URL=$PKGURL
fi
note "Setting omnios publisher to $OMNIOS_URL"
pkg -R $MP unset-publisher omnios
pkg -R $MP set-publisher -P --no-refresh -g $OMNIOS_URL omnios

# Starting with r151014, require signatures for the omnios publisher.
if [[ $OMNIOS_URL != */bloody/* ]]; then
    note "Setting signature policy to require."
    pkg -R $MP set-publisher \
        --set-property signature-policy=require-signatures omnios
fi

# Pre-seed the SMF database.

note "Seeding SMF database."

[ -x "$PREBUILT_ILLUMOS/usr/src/cmd/svc/svccfg/svccfg-native" ] \
    && SVCCFG="${PREBUILT_ILLUMOS}/usr/src/cmd/svc/svccfg/svccfg-native" \
    || SVCCFG=/usr/sbin/svccfg
SVCCFG_DTD=$MP/usr/share/lib/xml/dtd/service_bundle.dtd.1
SVCCFG_REPOSITORY=/tmp/kayak.svc.$$
SVCCFG_CHECKHASH=1
export SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH

cp $MP/lib/svc/seed/global.db $SVCCFG_REPOSITORY
chmod 0600 $SVCCFG_REPOSITORY
chown root:sys $SVCCFG_REPOSITORY
$SVCCFG import -p /dev/stdout $MP/lib/svc/manifest

tf=`mktemp`
$SVCCFG -s smf/manifest listprop | grep /md5sum | while read line; do
    set -- `echo $line`
    pg="`echo $1 | sed 's^/md5sum^^'`"
    [ "$2" = opaque ] || continue
    sum="$3"
    path=`echo $pg | sed '
        s^.*_lib_svc_^_lib_svc_^
        s^_xml$^.xml^
        s^_^/^g
    '`
    newpg=`echo $path | sed '
        s/\.xml$/_xml/
        s^/^_^g
        s/^_*//g
    '`

    cat << EOM >> $tf
delprop $pg
addpg $newpg framework
setprop $newpg/manifestfile = astring: $path
setprop $newpg/md5sum = opaque: $sum

EOM
done

$SVCCFG -s smf/manifest -f $tf
rm -f $tf

cp -p $SVCCFG_REPOSITORY $MP/etc/svc/repository.db
rm -f $SVCCFG_REPOSITORY
unset SVCCFG_DTD SVCCFG_REPOSITORY SVCCFG_CHECKHASH

############################################################################

note "Creating compressed stream"
zfs snapshot $ZROOT/$name@kayak || fail "snap"
zfs send $ZROOT/$name@kayak | pv | xz -9c > $OUT || fail "send/compress"
if [ "$CLEANUP" -eq "1" ]; then
    zfs destroy $ZROOT/$name@kayak || fail "could not remove snapshot"
    zfs destroy $ZROOT/$name || fail "could not remove zfs filesystem"
fi

# Vim hints
# vim:ts=4:sw=4:et:fdm=marker
