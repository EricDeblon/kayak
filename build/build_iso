#!/usr/bin/ksh

# {{{ CDDL HEADER
# This file and its contents are supplied under the terms of the
# Common Development and Distribution License ("CDDL"), version 1.0.
# You may only use this file in accordance with the terms of version
# 1.0 of the CDDL.
#
# A full copy of the text of the CDDL should have accompanied this
# source.  A copy of the CDDL is also available via the Internet at
# http://www.illumos.org/license/CDDL.
# }}}

#
# Copyright 2017 OmniTI Computer Consulting, Inc. All rights reserved.
# Copyright 2018 OmniOS Community Edition (OmniOSce) Association.
#

#
# Build an ISO installer using the Kayak tools.
#

if [ "`id -u`" != "0" ]; then
	echo "You must be root to run this script."
	exit 1
fi

if [ -z "$BUILDSEND_MP" ]; then
	echo "Using /rpool/kayak_image for BUILDSEND_MP"
	BUILDSEND_MP=/rpool/kayak_image
fi

[ -z "$VERSION" ] && \
    VERSION="`head -1 $BUILDSEND_MP/root/etc/release | awk '{print $3}'`"
echo "Using version $VERSION..."

stage()
{
	echo "***"
	echo "*** $*"
	echo "***"
}

# Allow temporary directory override
: ${TMPDIR:=/tmp}

# Files prepared by other parts of the kayak build process

KAYAK_MINIROOT=$BUILDSEND_MP/miniroot.gz
ZFS_IMG=$BUILDSEND_MP/kayak_${VERSION}.zfs.xz

[ ! -f $KAYAK_MINIROOT -o ! -f $ZFS_IMG ] && echo "Missing files." && exit 1

# Mount-points

MINIROOT_ROOT=$TMPDIR/miniroot.$$
BA_ROOT=$TMPDIR/boot_archive.$$
UEFI_ROOT=$TMPDIR/uefi.$$
ISO_ROOT=$TMPDIR/iso_root.$$

# Image files

MINIROOT_FILE=$TMPDIR/miniroot_$$.img
BA_FILE=$TMPDIR/boot_archive_$$.img

# Parameters

BA_SIZE=225M

# Uncomment the following line to build a UEFI ISO.
# We aren't building UEFI yet.
#UEFI_SIZE=4M

# Output file

DST_ISO=$BUILDSEND_MP/${VERSION}.iso

#############################################################################
#
# The kayak mini-root is used for both the ISO root filesystem and for the
# miniroot that is loaded and mounted on / when booted.
#

set -o errexit

# First, uncompress the miniroot to a temporary file and mount it on
# $MINIROOT_ROOT

stage "Mounting source miniroot"
gzip -dc $KAYAK_MINIROOT > $MINIROOT_FILE
LOFI_MINIROOT=`lofiadm -a $MINIROOT_FILE`
mkdir $MINIROOT_ROOT
mount $LOFI_MINIROOT $MINIROOT_ROOT

# Now create a UFS boot-archive image and mount it on $BA_ROOT

stage "Creating UFS image for boot archive"
mkfile $BA_SIZE $BA_FILE
LOFI_BA=`lofiadm -a $BA_FILE`
yes | newfs -m 0 $LOFI_BA
mkdir $BA_ROOT
mount $LOFI_BA $BA_ROOT

# Copy the files from the miniroot to the boot archive
sz=`du -sh $MINIROOT_ROOT | awk '{print $1}'`
stage "Adding files to boot archive"
tar -cf - -C $MINIROOT_ROOT . | pv -s $sz | tar -xf - -C $BA_ROOT

# ...and to the ISO root
stage "Adding files to ISO root"
mkdir $ISO_ROOT
tar -cf - -C $MINIROOT_ROOT . | pv -s $sz | tar -xf - -C $ISO_ROOT

# No longer need the source miniroot so unmount it and clean up the
# temporary file.
stage "Unmounting source miniroot"
umount $MINIROOT_ROOT
rmdir $MINIROOT_ROOT
lofiadm -d $LOFI_MINIROOT
rm $MINIROOT_FILE

# Place the full ZFS image into the ISO root so it does not form part of the
# boot archive (otherwise the boot seems to hang for several minutes while
# the miniroot is loaded)

stage "Adding ZFS image to ISO root"
mkdir -p $ISO_ROOT/image
pv $ZFS_IMG > $ISO_ROOT/image/`basename $ZFS_IMG`
# Create a file to indicate that this is the right volume set on which to
# find the image - see src/mount_media.c
echo $VERSION > $ISO_ROOT/.volsetid

# Put additional files into the boot-archive on $BA_ROOT, which is
# what will be / (via ramdisk) once the ISO is booted.

stage "Adding extra files to miniroot"

# Extra files
for dir in bin; do
	[ -d $BA_ROOT/kayak/$dir ] || mkdir -p $BA_ROOT/kayak/$dir
	cp -p $dir/* $BA_ROOT/kayak/$dir/
done

if [ -n "$REFRESH_KAYAK" ]; then
	# For testing, make sure files in miniroot are current
	find $BA_ROOT/kayak -type f | while read f; do
		[ -f "$f" ] || continue
		echo "REFRESH $f"
		cp `echo $f | sed 's^.*/kayak/^^'` $f
	done
fi

# Have initialboot invoke an interactive installer.
cat <<EOF > $BA_ROOT/.initialboot
/kayak/bin/takeover-console /kayak/installer/kayak-menu
exit 0
EOF
# Increase the timeout
SVCCFG_REPOSITORY=$BA_ROOT/etc/svc/repository.db \
    svccfg -s system/initial-boot setprop "start/timeout_seconds=86400"

# Refresh the devices on the miniroot.
devfsadm -r $BA_ROOT

#
# The ISO's miniroot is going to be larger than the PXE miniroot. To that
# end, some files not listed in the exception list do need to show up on
# the miniroot. Use PREBUILT_ILLUMOS if available, or the current system
# if not.
#

PROTO=
[ -n "$PREBUILT_ILLUMOS" -a -d $PREBUILT_ILLUMOS/proto/root_i386-nd ] \
    && PROTO=$PREBUILT_ILLUMOS/proto/root_i386-nd

from_one_to_other() {
    dir=$1

    [ -n "$PROTO" -a -d $PROTO/$dir ] && src=$PROTO || src=/

    shift
    tar -cf - -C $src/$dir ${@:-.} | tar -xf - -C $BA_ROOT/$dir
}

from_one_to_other usr/share/lib/zoneinfo
from_one_to_other usr/share/lib/keytables
from_one_to_other usr/share/lib/terminfo
from_one_to_other usr/gnu/share/terminfo
from_one_to_other usr/sbin ping
from_one_to_other usr/bin netstat

######################################################################
# Configure the loader for installer

# Splash screen - add release version to top of screen

sed < $ISO_ROOT/boot/forth/brand-omnios.4th \
    > $ISO_ROOT/boot/forth/brand-omniosi.4th "
	/\" *\\/.*brand\+/s/ \"/  @[32m$VERSION@[m&/
"

cat <<EOF > $ISO_ROOT/boot/loader.conf.local
loader_menu_title="Welcome to the OmniOSce installer"
loader_brand="omniosi"
autoboot_delay=10
EOF

# Add option to boot from hard disk
cat << EOM > $ISO_ROOT/boot/menu.rc.local
set mainmenu_caption[6]="Boot from [H]ard Disk"
set mainmenu_command[6]="chain disk0:"
set mainmenu_keycode[6]=104
set mainansi_caption[6]="Boot from ^[1mH^[mard Disk"
EOM

######################################################################

#
# Okay, we've populated the new miniroot. Close it up and install it
# on $ISO_ROOT as the boot archive.
#
stage "Boot archive miniroot size"
df -h $BA_ROOT
stage "Unmounting boot archive image"
umount $BA_ROOT
rmdir $BA_ROOT
lofiadm -d $LOFI_BA

stage "Installing boot archive"
pv $BA_FILE | gzip -9c > $ISO_ROOT/platform/i86pc/amd64/boot_archive.gz
ls -lh $ISO_ROOT/platform/i86pc/amd64/boot_archive.gz | awk '{print $5}'
digest -a sha1 $BA_FILE \
    > $ISO_ROOT/platform/i86pc/amd64/boot_archive.hash
rm -f $BA_FILE
stage "Removing unecessary files from ISO root"
rm -rf $ISO_ROOT/{usr,bin,sbin,lib,kernel}
stage "ISO root size: `du -sh $ISO_ROOT/.`"

# And finally, burn the ISO.

if [ -n "$UEFI_SIZE" ]; then
	if [ -n "$PROTO" -a -f $PROTO/boot/loader64.efi ]; then
		echo "Using loader.efi from proto"
		EFI32=$PROTO/boot/loader32.efi
		EFI64=$PROTO/boot/loader64.efi
	elif [ -f /boot/loader64.efi ]; then
		echo "Using loader.efi from running system"
		EFI32=/boot/loader32.efi
		EFI64=/boot/loader64.efi
	else
		echo "Cannot find loader32/64.efi"
		rm -rf $ISO_ROOT
		exit 1
	fi
	# Create a UEFI bootblock
	stage "Building UEFI bootblock"
	UEFI_FILE=$ISO_ROOT/boot/efiboot.img
	mkfile $UEFI_SIZE $UEFI_FILE
	LOFI_UEFI=`lofiadm -a $UEFI_FILE`
	yes | mkfs -F pcfs \
	    -o b=System,nofdisk,size=8800 ${LOFI_UEFI//lofi/rlofi}
	mkdir $UEFI_ROOT
	mount -F pcfs $LOFI_UEFI $UEFI_ROOT
	mkdir -p $UEFI_ROOT/efi/boot
	cp $EFI32 $UEFI_ROOT/efi/boot/bootia32.efi
	cp $EFI64 $UEFI_ROOT/efi/boot/bootx64.efi
	df -h $UEFI_ROOT
	umount $UEFI_ROOT
	rmdir $UEFI_ROOT
	lofiadm -d $LOFI_UEFI

	mkisofs -N -l -R -U -d -D \
		-V "OmniOSce $VERSION" \
		-o $DST_ISO \
		-c .catalog \
		-allow-multidot \
		-no-iso-translate \
		-cache-inodes \
		\
		-eltorito-boot boot/cdboot -no-emul-boot -boot-info-table \
		-eltorito-alt-boot \
		-eltorito-boot boot/`basename $UEFI_FILE` -no-emul-boot \
		\
		$ISO_ROOT
else
	mkisofs -N -l -R -U -d -D \
		-V "OmniOSce $VERSION" \
		-o $DST_ISO \
		-c .catalog \
		-allow-multidot \
		-no-iso-translate \
		-cache-inodes \
		\
		-b boot/cdboot -no-emul-boot -boot-load-size 4 \
		-boot-info-table \
		\
		$ISO_ROOT
fi

rm -rf $ISO_ROOT
stage "$DST_ISO is ready"
ls -lh $DST_ISO

# Vim hints
# vim:fdm=marker
